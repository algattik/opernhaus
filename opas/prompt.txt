Create a javascript embedded in a web page that converts JSON to an ics file.

Respond with the actual HTML and JavaScript code and nothing else. Do not provide explanations.

The user should open the webpage, paste the JSON in a textarea, and press a button. That should produce an ics file that the user can open in a calendar application.

The input JSON looks like this:

```json
[
    {
        "date_id": 21058,
        "title": "DIENST\u00dcBERTRAG",
        "start": "2024-09-02 07:00:00",
        "textColor": "#c5c5c5",
        "backgroundColor": "#ffffff",
        "borderColor": "#D00E00",
        "allDay": false,
        "tooltip": "DIENST\u00dcBERTRAG\n (D:0)",
        "holiday": "",
        "holiday_bg": "",
        "holiday_color": "",
        "planninglevel": "1",
        "duties": "0.00",
        "end": "2024-09-02 07:30:00"
    },
    {
        "date_id": 19190,
        "title": "OA 1\nARIADNE",
        "start": "2024-09-02 10:00:00",
        "textColor": "#505050",
        "backgroundColor": "#c0fdac",
        "borderColor": "#D00E00",
        "allDay": false,
        "tooltip": "ARIADNE\nOA 1 (D:1)\nMarkus Poschner, Dirigent\nPhilharmonia Z\u00fcrich\n\nStrauss, ARIADNE\n2[1, 2] 2[1, 2] 2[1, 2\/B'Kl] 2[1, 2] - 2[1, 2] 1 1 0 - Pk ? 1, 2 Klav, Harmonium, Celesta - 3 3 4 4 2\nmax. 2 2 2 2 - 2 1 1 0 - Pk 3-Sz 2-Hrf 3-Tast. - 3 3 4 4 2",
        "holiday": "",
        "holiday_bg": "",
        "holiday_color": "",
        "planninglevel": "1",
        "duties": "1.00",
        "end": "2024-09-02 12:30:00"
    },
    {
        "date_id": 19191,
        "title": "OA 2\nARIADNE",
        "start": "2024-09-02 19:00:00",
        "textColor": "#505050",
        "backgroundColor": "#c0fdac",
        "borderColor": "#D00E00",
        "allDay": false,
        "tooltip": "ARIADNE\nOA 2 (D:1)\nMarkus Poschner, Dirigent\nPhilharmonia Z\u00fcrich\n\nStrauss, ARIADNE\n2[1, 2] 2[1, 2] 2[1, 2\/B'Kl] 2[1, 2] - 2[1, 2] 1 1 0 - Pk ? 1, 2 Klav, Harmonium, Celesta - 3 3 4 4 2\nmax. 2 2 2 2 - 2 1 1 0 - Pk 3-Sz 2-Hrf 3-Tast. - 3 3 4 4 2",
        "holiday": "",
        "holiday_bg": "",
        "holiday_color": "",
        "planninglevel": "1",
        "duties": "1.00",
        "end": "2024-09-02 21:30:00"
    },
```

Only items with "backgroundColor": "#c0fdac" should be used from the JSON.

The resulting file should look like this:

```
BEGIN:VCALENDAR
VERSION:2.0
BEGIN:VEVENT
DTSTART:20240902T080000Z
DTEND:20240902T103000Z
SUMMARY:OA 1: ARIADNE
UID:opas-21058
END:VEVENT
BEGIN:VEVENT
DTSTART:20240902T170000Z
DTEND:20240902T193000Z
SUMMARY:OA 2: ARIADNE
UID:opas-19191
END:VEVENT
END:VCALENDAR
```

Do not forget the BEGIN:VCALENDAR and END:VCALENDAR lines.

Make sure to escape any special characters in the text. However, do not escape the newlines that terminate lines of the ics file.

Ensure the output is a valid ics file compatible with calendar programs.

In the JavaScript code, ensure that if a function returns a promise, we need to wait for the promise to resolve before using its value in a string.

The web page should start with the following introduction:

```markdown
# Opas data to Calendar converter

Instructions:
1. Open [Opas](https://ohz.opas-online.com) and log in.
1. Open the [2024-2025](https://ohz.opas-online.com/calendar.php?&start=2024-08-01&end=2025-07-31) season data. (For other time ranges, adjust the dates appearing in the URL).
1. If `"unlogged"` is displayed, go back to step 1 to log in.
1. This displays technical data in the browser. Copy all the data shown (Ctrl-A, Ctrl-C on PC; Command-A, Command-C on Mac) and paste it in the box below.
1. Click the button to generate the calendar file.
```

The web page should use Simple.css for styling.
